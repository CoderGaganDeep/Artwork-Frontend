Redux: Login & Signup given

Step:1-- Start: backend - setup ß
Create new instance on elephantSQL & add it on config.js -- Done
Generate New models and migrations for Space and story-- Done
Add Validations to models & migrations -- Done
Set up relations: -- Done	
STORY
Story belongs to Space
Spcae has many Stories
USER
Spcae belongs to user
user has many Space
Create Seeds for space and story -- create 4 stories and 2 spaces -- Done
Query relations (Keep it simple)  -- Done
Create new router folder & import it on index.js -- Done

Step:2 -- Feature 1
``` js
Const innitalState = {
Spaces: [ ] || null,
spaceDetails: { }[] || null
}
Set up the endpoint in the backend and test it (httpi)-- (BackendStep)-  -- Done
Create a new component/page, add to app.js, register a page (Frontend)
Create New slice - src/user/slice & selectors & thunks & import
Write a thunk to fetch data (space)
Import the thunk in the page, pass it to useEffect & disptach it 
Check the response
Go back to thunk, dispatch it to the reducer
Write a case in the reducer
Create a selector to select spaces
Import the selector on the page, pass it to the useSelector 
Map the dat

Step:3 -- Feature 2

Set up the endpoint in the backend and test it (httpi)-- (BackendStep)
Create a new component/page, add to app.js, register a page (Frontend)
Create new property in the reducer `spaceDetails`
Write a thunk to fetch data (space)
Import the thunk in the page, pass it to useEffect & disptach it 
Check the response
Go back to thunk, dispatch it to the reducer
Write a case in the reducer
Create a selector to select spaces
Import the selector on the page, pass it to the useSelector 
Display the data

Step 4 -- Feature 3
When a user sign's up a space is created
New space is saved to the database with the correct attributes
The space is sent in the response of /signup along with the new user

Step 5 -- Feature 4

1. Add an If on your navigation bar, to show the MySpace NavLink just if the token is true; - 
2. Import the userId on the Navigation bar to add on the mySpace route; - 
3. Fix the endpoint (login + me) of the users to send the mySpace + stories with the data of the user; - 
    - [ ] Add a new Space.findOne(userId) inside the login and the me endpoint;
    - [ ] Add the value on the user object before the response.send to the client;
    - [ ] Check the data before pass to the client and inside the client (thunk);
 4. Inside the thunks, create a new dispatch to the action setMySpace, with the information of the space and its stories;
5. Create a selector to pass the mySpace data to the mySpace page;
6. Import the mySpace and the user inside the mySpace page using useSelector
7. Display the data on the MySpace page;
8. Create the structure of the page (div, buttons, etc)
9. Delete the Story:
    - [ ] Create the endpoint to delete the story;
    - [ ] Create the thunk to delete the story;
    - [ ] Dispatch the delete thunk from the MySpace page;
10. Create the useEffect to monitor the data and refresh the page when the story is deleted without refresh manually;
    - [ ] Inside the deleteStory thunk make a request to the endPoint: router.get('/details/:id’)
    - [ ] Check the data;
    - [ ] Dispatch the response.data to the setMySpace reducer
    - [ ] Create the mySpace Selector - In this case was created;
    - [ ] Import the mySpace selector on the MySpace page using useSelector - In this case was done;
    - [ ] Add the useEffect to monitor the mySpace;

Step 5 -- Feature 5
- 1. Create a new page to post a new Story; - Parcial
    - Set the route to this page inside the details page;
- 2. Create the endPoint to add the newStory; - Done
- 3. Create the thunk to post the new story to the Api/endpoint; - Done
- 4. Dispatch the thunk from the mySpace;
    - onClick function inside the 
- 5. Check the response inside the thunk;
- 6. Fetch the mySpace data again (the same code than inside the delete story thunk);
- 7. Dispatch the setMySpace reducer from the thunk;
    - If the reducer was not created before, create the necessary reducer;
- 8. Create a selector to monitor and pass the mySpace to the page - In this case was created;
- 9. Import the mySpace selector on the MySpace page using useSelector - In this case was done;
- 10. Add the useEffect to monitor the mySpace - In this case was done on feature 4;
